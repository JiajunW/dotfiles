"{{{ Vundle
set nocompatible " be iMproved, required
filetype off " requied by vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
"}}}

"{{{ Plugins
Plugin 'bling/vim-airline'
"Plugin 'undotree.vim'
Plugin 'mbbill/undotree'
Plugin 'ag.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'delimitMate.vim'
Plugin 'surround.vim'
Plugin 'repeat.vim'
Plugin 'The-NERD-tree'
Plugin 'The-NERD-Commenter'
Plugin 'ctrlp.vim'
Plugin 'Tagbar'
Plugin 'fugitive.vim'
"Plugin 'Syntastic'
Plugin 'easymotion/vim-easymotion'
Plugin 'a.vim'
Plugin 'Emmet.vim'
"Plugin 'vimwiki'
"Plugin 'groenewege/vim-less'
Plugin 'colorizer'
Plugin 'rizzatti/dash.vim'

" colorscheme
Plugin 'wombat256.vim'

call vundle#end()
"}}}

"{{{ Helper
function! s:EnsureDirExists(dir)
	if exists('*mkdir') && !isdirectory(a:dir)
		silent! call mkdir(a:dir, 'p')
	endif
	return a:dir
endfunction
"}}}

"{{{ Config
let mapleader=';'
let s:dotvim = fnamemodify($MYVIMRC, ':h').'/'
if has("unix")
    let s:uname = system("echo -n \"$(uname)\"")
    if s:uname == "Darwin"
        let s:cachedir = expand("$HOME/Library/Caches/vim/")
    else
        let s:cachedir = expand("$HOME/.cache/vim/")
    endif
endif

call s:EnsureDirExists(s:cachedir)
"}}}

"{{{ General
filetype plugin indent on
syntax on

set nowrap
set nocompatible
set lbr
set number
set numberwidth=4
set relativenumber
set foldlevel=3
set hlsearch
set incsearch
set foldmethod=syntax
set wildmenu
set wildmode=longest:full,full
set modeline
set modelines=5
set list
set listchars=tab:\|-,trail:·,precedes:«,extends:»
set pastetoggle=<F12>
set display+=lastline
set cul
set virtualedit=block
execute "set viminfo+=n".s:cachedir."viminfo"

if has("persistent_undo")
    set undofile
    let s:undodir = s:cachedir."undo"
    execute "set undodir=".s:undodir
    call s:EnsureDirExists(s:undodir)
endif

if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
"}}}

"{{{ Handy
nnoremap <leader>r :source $HOME/.vim/vimrc<cr>
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>
nnoremap <silent> <F10> :call ToggleWrap()<CR>
nnoremap <F11> :set invnumber<CR>

function! ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        silent! nunmap <buffer> k
        silent! nunmap <buffer> j
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak
        setlocal display+=lastline
        noremap  <buffer> <silent> k      gk
        noremap  <buffer> <silent> j      gj
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" jump to the last cursor position when editing a file
autocmd BufReadPost *
    \ if ! exists("g:leave_my_cursor_position_alone") |
    \     if line("'\"") > 0 && line ("'\"") <= line("$") |
    \         exe "normal g'\"" |
    \     endif |
    \ endif

" remove trailing spaces
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
"}}}

"{{{ UI
try
    colorscheme wombat256mod
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme desert
endtry

" set the cursor
if &term =~ '^xterm'
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
elseif &term =~ '^screen'
    " making tmux work
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif
"}}}

"{{{ airline
set laststatus=2
set noshowmode
let g:airline_powerline_fonts = 1
let g:airline_theme='powerlineish'
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
"}}}

"{{{ undo
map <F2> :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
function! g:Undotree_CustomMap()
    nmap <buffer> k <plug>UndotreeGoNextState
    nmap <buffer> j <plug>UndotreeGoPreviousState
    nmap <buffer> < <plug>UndotreeGoNextSaved
    nmap <buffer> > <plug>UndotreeGoPreviousSaved
endfunction
"}}}

"{{{ Completion
"}}}

"{{{ Snip
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = s:dotvim.'ycm.py'
let g:ycm_extra_conf_vim_data = ['&filetype']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_path_to_python_interpreter = '/usr/bin/python2.7'
let g:ycm_key_invoke_completion = '<leader>y'

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
"}}}

"{{{ delimitMate
let delimitMate_expand_cr = 1
"}}}

"{{{ NERDTree
map <F4> :NERDTreeToggle<CR>
let NERDTreeWinPos='left'
let NERDTreeIgnore=['\.o$', '\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
"}}}

"{{{ Emmet.vim
let g:user_emmet_install_global = 0
autocmd FileType html,htmldjango,css,less EmmetInstall
let g:user_emmet_leader_key = ','
"}}}

"{{{ syntastic
let g:syntastic_javascript_jslint_conf=''
let g:syntastic_python_flake8_args='--ignore=E501'
let g:syntastic_cpp_compiler_options='-std=c++11'
"}}}

"{{{ EasyMotion
map <leader> <Plug>(easymotion-prefix)
"}}}

"{{{ CtrlP
let g:ctrlp_user_command =
    \ ['.git', 'cd %s && git ls-files . -co --exclude-standard']
let g:ctrlp_cache_dir = s:cachedir.'ctrlp'
call s:EnsureDirExists(g:ctrlp_cache_dir)
"}}}

"{{{ Tagbar
nnoremap <silent> <F3> :TagbarToggle<CR>
let g:tagbar_iconchars = ['▸', '▾']
"}}}

"{{{ ctags
if filereadable('./tags')
    execute 'set tags=tags'

    map <C-]> :tselet <C-R>=expand("<cword>")<CR><CR>
    map <C-]> g<C-]>
endif
"}}}

"{{{ cscope
if has('cscope')
    "set cscopetagcscopeverbose
    if filereadable('cscope.out')
        execute 'cs add cscope.out'

        nmap <C-e>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-e>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-e>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-e>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-e>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-e>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-e>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-e>d :cs find d <C-R>=expand("<cword>")<CR><CR>

        if has('quickfx')
            set cscopequckfix=s-,c-,d-,i-,t-,e-
        endif
    endif
endif
"}}}

"{{{ Dash
nmap <silent> <leader>d <Plug>DashSearch
"}}}

"{{{ C/CPlusPlus
autocmd FileType c,cpp setlocal ts=4 sw=4 et sts=4
"}}}

"{{{ Python
autocmd FileType python setlocal ts=4 sw=4 et sts=4 foldmethod=indent
"}}}

"{{{ Java
autocmd FileType java setlocal ts=4 sw=4 et sts=4
"}}}

"{{{ HTML
autocmd FileType html,htmldjango setlocal ts=2 sw=2 et sts=2 foldmethod=indent
autocmd FileType html let b:delimitMate_expand_space = 1
"}}}

"{{{ CSS & LESS
autocmd FileType css,less,scss setlocal ts=2 sw=2 et sts=2
"}}}

"{{{ JavaScript
autocmd FileType javascript setlocal ts=4 sw=4 et sts=4 foldmethod=marker foldmarker={,}
"}}}

"{{{ LaTeX
autocmd FileType tex setlocal ts=2 sw=2 et sts=2
"}}}

" vim: set tw=80 sw=4 sts=4 et foldmethod=marker :
